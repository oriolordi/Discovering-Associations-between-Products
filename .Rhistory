rules_distributors_categories_by_conf <- sort(rules_distributors_categories, by = "lift")
rules_distributors_categories_by_conf <- rules_distributors_categories_by_conf[!is.redundant(rules_distributors_categories_by_conf)]
inspect(rules_distributors_categories_by_conf)
plot(rules_distributors_categories_by_conf, method="graph", control=list(type="items"))
print("<3")
rules_customers_items <- apriori(transactions_customers_items, parameter = list(support = 0.0001, confidence = 0.025, minlen=2), appearance = list(lhs = 'iMac'))
rules_customers_items_by_conf <- sort(rules_customers_items, by = "lift")
rules_customers_items_by_conf <- rules_customers_items_by_conf[!is.redundant(rules_customers_items_by_conf)]
inspect(rules_customers_items_by_conf)
plot(rules_customers_items_by_conf, method="graph", control=list(type="items"))
rules_distributors_items <- apriori(transactions_distributors_items, parameter = list(support = 0.01, confidence = 0.1, minlen=2), appearance = list(lhs = 'iMac'))
rules_distributors_items_by_conf <- sort(rules_distributors_items, by = "lift")
rules_distributors_items_by_conf <- rules_distributors_items_by_conf[!is.redundant(rules_distributors_items_by_conf)]
inspect(rules_distributors_items_by_conf)
plot(rules_distributors_items_by_conf, method="graph", control=list(type="items"))
transactions_df[transactions_df[Gaming_Pc > 1]]
transactions_df[transactions_df[Gaming Pc > 1]]
transactions_df[Gaming Pc > 1]
transactions_df[transactions_df[Gaming Pc > 1],]
transactions_df[Gaming Pc > 1,]
transactions_df[,Gaming Pc > 1]
transactions_df[Monitors]
transactions_df['Monitors']
transactions_df['Gaming Pc' > 1]
transactions_df[transactions_df['Gaming Pc'' > 1]]
transactions_df[transactions_df['Gaming Pc' > 1]]
transactions_df['Gaming Pc' > 1]
transactions_df['Gaming Pc' > 1,]
transactions_df['Gaming Pc']
transactions_df['Gaming Pc'] > 1
transactions_df[transactions_df['Gaming Pc'] > 1]
nrow(transactions_df[transactions_df['Gaming Pc'] > 1])
length(transactions_df[transactions_df['Gaming Pc'] > 1])
length(transactions_df[transactions_df['Gaming Pc'] > 1] == 1)
length(transactions_df[transactions_df['Gaming Pc'] > 1])
transactions_df[transactions_df['Gaming Pc'] > 1]
transactions_df['Gaming Pc'] > 1
sum(transactions_df['Gaming Pc'] > 1)
sum(transactions_df['Gaming Pc'] == 1)
sum(transactions_df['Gaming Pc'] > 0)
knitr::opts_chunk$set(echo = TRUE)
population <- data.frame ( type = c("retailer", "consumers"), transactions = c(sum(distr), length(tr_product)-sum(distr)), prp = c(sum(distr)/length(tr_product), (length(tr_product)-sum(distr))/length(tr_product)) )
#Creating datasets for distributor and consumer####
#Defining the matrix of distributors
transactions_dataframe <- as.data.frame(t(as.matrix((tr_product@data))))
colnames(transactions_dataframe)<- label
types <- unique(label)
types <- cbind(types, c(2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)) #For ptypes = 3 (Mouse & Keyboard 3 or 4 -- Accesories 2-3)
distr <- vector(mode="logical", nrow(transactions_dataframe))
for (i in 1:nrow(transactions_dataframe)){
for (j in 1:length(types[,1])){
total = length(which(transactions_dataframe[i,which(colnames(transactions_dataframe)==types[j,1])] == TRUE)) #Look for columns with same name and sum the trues.
if (total >= types[j,2]){ #Distributor condition defined in dataframe types
distr[i] = TRUE #If the trues are more than the distributor condition then TRUE in the matrix
}
}
total = length(which(transactions_dataframe[i,which(colnames(transactions_dataframe)==types[4,1])] == TRUE)) #Laptop (ptypes = 3 -> j = 4
total = total + length(which(transactions_dataframe[i,which(colnames(transactions_dataframe)==types[5,1])] == TRUE)) #Desktop (ptypes =3 -> j = 5)
total = total + length(which(transactions_dataframe[i,which(colnames(transactions_dataframe)==types[7,1])] == TRUE)) # Pc Gaming (ptypes = 3 -> j = 7)
if (total >= 2) {
distr[i] <- TRUE
}
}
sum(distr)
#Function to verify the distribution
distribution <- function (trans) {
distribution_index <- vector(mode="integer", length =length(trans))
for (i in 1:length(distribution_index)) {
distribution_index[i] <- size(trans[i])
}
ggplot()+ aes(distribution_index) +
geom_bar(color = "blue", fill = "white")
#geom_histogram(color="blue", binwidth = 1, fill="white",)
}
#Matrix creation and outlier elimination
#Product-Consumers
tr_product_cons <- tr_product[!distr]
tr_product_cons <- tr_product_cons[-which(size(tr_product_cons) > 8)] #Remove outliers
#Product-Distributor
tr_product_dist <- tr_product[distr]
tr_product_dist <- tr_product_dist[-which(size(tr_product_dist) > 25)]
#Type -> consumers
tr_ptype_cons <- tr_ptype[!distr]
tr_ptype_cons <- tr_ptype_cons[-which(size(tr_ptype_cons) > 8)]
#Type -> distributor
tr_ptype_dist <- tr_ptype[distr]
population <- data.frame ( type = c("retailer", "consumers"), transactions = c(sum(distr), length(tr_product)-sum(distr)), prp = c(sum(distr)/length(tr_product), (length(tr_product)-sum(distr))/length(tr_product)) )
ggplot( data = population, aes( x= "", y = transactions, fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(transactions),  " - ", round(prp*100), "%")), position = position_stack(vjust = 0.5))
distr
head(population)
sum(transactions_df['Gaming Pc'] > 0)
sum(transactions_customers_categories_df['Gaming Pc'] > 0)
sum(transactions_customers_categories_df['Gaming Pc'] > 1)
sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
sum(transactions_distributors_categories_df['Gaming Pc'] > 1)
# Plot the proportion of Retailers buying multiple Gamin Pcs (which will be considered Gaming retailers) ####
retailers_buying_one_gaming_pc <- sum(transactions_df['Gaming Pc'] > 0) - sum(transactions_customers_categories_df['Gaming Pc'] > 0)
retailers_buying_multiple_gaming_pc <- sum(transactions_df['Gaming Pc'] > 1)
gaming <- data.frame (type = c("Gaming", "Non Gaming"), number = c(retailers_buying_one_gaming_pc,retailers_buying_multiple_gaming_pc) )
gaming
multiple_gaming_pcs <- data.frame (type = c("One Gaming PC", "Multiple Gaming PCs"), number = c(retailers_buying_one_gaming_pc,retailers_buying_multiple_gaming_pc), prop = c(retailers_buying_one_gaming_pc/(retailers_buying_one_gaming_pc+retailers_buying_multiple_gaming_pc), retailers_buying_multiple_gaming_pc/(retailers_buying_multiple_gaming_pc + retailers_buying_one_gaming_pc)) )
multiple_gaming_pcs
ggplot( data = multiple_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
library(ggplot2)
ggplot( data = multiple_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
length(distributors_indices)
# Plot the proportion of Retailers buying Gaming Pcs ####
retailers_buying_gaming_pc <- sum(transactions_df['Gaming Pc'] > 0)
retailers_total <- 4822
# Plot the proportion of Retailers buying Gaming Pcs ####
retailers_buying_gaming_pc <- sum(transactions_df['Gaming Pc'] > 0)
retailers_not_buying_gaming_pc <- 4822 - sum(transactions_df['Gaming Pc'] > 0)
buying_gaming_pcs <- data.frame (type = c("Buying Gaming PCs", "Not Buying Gaming PCs"), number = c(retailers_buying_gaming_pc,retailers_not_buying_gaming_pc), prop = c(retailers_buying_gaming_pc/(retailers_buying_gaming_pc+retailers_not_buying_gaming_pc), retailers_not_buying_gaming_pc/(retailers_buying_gaming_pc + retailers_not_buying_gaming_pc)) )
ggplot( data = multiple_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
# Plot the proportion of Retailers buying Gaming Pcs ####
retailers_buying_gaming_pc <- sum(transactions_df['Gaming Pc'] > 0)
retailers_not_buying_gaming_pc <- 4822 - sum(transactions_df['Gaming Pc'] > 0)
buying_gaming_pcs <- data.frame (type = c("Buying Gaming PCs", "Not Buying Gaming PCs"), number = c(retailers_buying_gaming_pc,retailers_not_buying_gaming_pc), prop = c(retailers_buying_gaming_pc/(retailers_buying_gaming_pc+retailers_not_buying_gaming_pc), retailers_not_buying_gaming_pc/(retailers_buying_gaming_pc + retailers_not_buying_gaming_pc)) )
ggplot( data = buying_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
# Plot the proportion of Retailers buying Gaming Pcs ####
retailers_buying_gaming_pc <- sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
retailers_not_buying_gaming_pc <- 4822 - sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
buying_gaming_pcs <- data.frame (type = c("Buying Gaming PCs", "Not Buying Gaming PCs"), number = c(retailers_buying_gaming_pc,retailers_not_buying_gaming_pc), prop = c(retailers_buying_gaming_pc/(retailers_buying_gaming_pc+retailers_not_buying_gaming_pc), retailers_not_buying_gaming_pc/(retailers_buying_gaming_pc + retailers_not_buying_gaming_pc)) )
ggplot( data = buying_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
# Plot the proportion of Customers buying Gaming Pcs ####
retailers_buying_gaming_pc <- sum(transactions_customers_categories_df['Gaming Pc'] > 0)
retailers_not_buying_gaming_pc <- 5011 - sum(transactions_customers_categories_df['Gaming Pc'] > 0)
buying_gaming_pcs <- data.frame (type = c("Buying Gaming PCs", "Not Buying Gaming PCs"), number = c(retailers_buying_gaming_pc,retailers_not_buying_gaming_pc), prop = c(retailers_buying_gaming_pc/(retailers_buying_gaming_pc+retailers_not_buying_gaming_pc), retailers_not_buying_gaming_pc/(retailers_buying_gaming_pc + retailers_not_buying_gaming_pc)) )
ggplot( data = buying_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
sum(transactions_customers_categories_df['Gaming Pc'] > 0)
# Plot the proportion of Retailers buying multiple Gamin Pcs (which will be considered Gaming retailers) ####
retailers_buying_one_gaming_pc <- sum(transactions_df['Gaming Pc'] > 0) - sum(transactions_customers_categories_df['Gaming Pc'] > 0)
retailers_buying_multiple_gaming_pc <- sum(transactions_df['Gaming Pc'] > 1)
multiple_gaming_pcs <- data.frame (type = c("One Gaming PC", "Multiple Gaming PCs"), number = c(retailers_buying_one_gaming_pc,retailers_buying_multiple_gaming_pc), prop = c(retailers_buying_one_gaming_pc/(retailers_buying_one_gaming_pc+retailers_buying_multiple_gaming_pc), retailers_buying_multiple_gaming_pc/(retailers_buying_multiple_gaming_pc + retailers_buying_one_gaming_pc)) )
ggplot( data = multiple_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
# Plot the proportion of Retailers buying Gaming Pcs ####
retailers_buying_gaming_pc <- sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
retailers_not_buying_gaming_pc <- 4822 - sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
buying_gaming_pcs <- data.frame (type = c("Buying Gaming PCs", "Not Buying Gaming PCs"), number = c(retailers_buying_gaming_pc,retailers_not_buying_gaming_pc), prop = c(retailers_buying_gaming_pc/(retailers_buying_gaming_pc+retailers_not_buying_gaming_pc), retailers_not_buying_gaming_pc/(retailers_buying_gaming_pc + retailers_not_buying_gaming_pc)) )
ggplot( data = buying_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
# DATASET TASK 3
# Predict the sales in four different types of products
# (PC, Laptops, Netbooks, Smartphones)
# while assessing the effects service and customer reviews have on sales
# And, of course, predict sales for the four types in the newproducts# Load necessary packages ####
library(readr)
library(ggplot2)
library(lattice)
library(corrplot)
library(e1071)
library(randomForest)
library(caret)
library(dplyr)
library(tidyverse)
library(RColorBrewer)
library(reshape)# Load the datasets ####
EPA <- read_csv('data/existingproductattributes2017.csv') #ORI
NPA <- read_csv('data/newproductattributes2017.csv') #ORI
#EPA <- read_csv("/home/alex/Desktop/Projects/Ubiqum/Task_3/Data/Existing.csv")#Alex
#NPA <- read_csv("/home/alex/Desktop/Projects/Ubiqum/Task_3/Data/New.csv")#Alex
EPA <- data.frame(EPA)
NPA <- data.frame(NPA)# Data exploration ####
# There are 15 observations that contain missing values (NA), all of them in the BestSellersRank column
# The bestsellers column will, thus, be removed completely
EPA$BestSellersRank <- NULL
# Remove outliers from the dependent variable
OutlierDataSet <- EPA
OutlierColumn <- OutlierDataSet[,ncol(OutlierDataSet)]
OutlierDataSet <- OutlierDataSet[OutlierColumn > (quantile(OutlierColumn)[[2]] - 1.5*IQR(OutlierColumn)),]
OutlierDataSet <- OutlierDataSet[OutlierColumn < (quantile(OutlierColumn)[[4]] + 1.5*IQR(OutlierColumn)),]
#EPA <- OutlierDataSet# Check for duplicated observations
# There are duplicated values with different prices
# The duplicated values will be merged into one single value and the price will be the mean of the duplicated values
# Keep one of the duplicated observations (the first one, for example)
duplicatedproductsvalues <- EPA[duplicated(EPA[,-c(2,3)]),][1,]
# Calculate the mean of the price of the duplicated observations
mean_duplicated <- mean(EPA$Price[duplicated(EPA[-c(2,3)])])
# Remove the duplicated observations
EPA <- EPA[!duplicated(EPA[-c(2,3)]),]
# Add one of the duplicated observations (the first one that had been saved previously)
EPA <- rbind(EPA,duplicatedproductsvalues)
# Change the price to the mean of the price of the duplicated values
EPA[nrow(EPA),'Price'] <- mean_duplicated# Check for rows with missing reviews ####
# There are 3 rows with missing x4,x3,x2,x1 reviews that will be removed
EPA <- EPA[-which(EPA$x4StarReviews==0 & EPA$x3StarReviews == 0 & EPA$x2StarReviews == 0 & EPA$x1StarReviews == 0),]# Check the variables ####
EPA <- EPA[-which(EPA$ProductNum == 118),]
EPA <- EPA[-which(EPA$ProductNum == 123),]
EPA <- EPA[-which(EPA$ProductNum == 134),]
EPA <- EPA[-which(EPA$ProductNum == 135),]# Placing the dependent variable in the first position ####
EPA <- subset(EPA, select=c(ncol(EPA),1:(ncol(EPA)-1)))# Check correlation
# Dummify with feature engineering
newDataFrame <- dummyVars(" ~ .", data = EPA)
EPA_dummy <- data.frame(predict(newDataFrame, newdata = EPA))
CorrData <- cor(EPA_dummy)
# Look for high correlation with the dependent variable and remove attributes
corrDataFrame <- data.frame(CorrData)
corrDataFrame[lower.tri(corrDataFrame,diag=TRUE)] <- NA
correlations <- corrDataFrame %>%
rownames_to_column("id") %>%
gather(key = "key", value = "value", -id) %>%
filter(value > 0.85 | value < -0.85)
#TASK 4
pacman:: p_load(ggplot2, caret,readxl, arules, arulesViz, shiny, devtools)
#Data importing####
tr_product <- read.transactions('data/ElectronidexTransactions2017.csv', format='basket', sep=',', rm.duplicates = FALSE) #ORI
ptype <- read_excel('data/products2.xlsx',col_names = TRUE) #ORI
#tr_product <- read.transactions("/home/alex/Desktop/Projects/Ubiqum/Task_4/Data/ElectronidexTransactions2017.txt",format = "basket", header = FALSE, sep="," ,cols = NULL, rm.duplicates = FALSE) #ALEX
#ptype <-  read_excel("/home/alex/Desktop/Projects/Ubiqum/Task_4/Data/products.xlsx") #ALEX
#Empty transaction
tr_product <- tr_product[-(which(size(tr_product)==0))]
#Creating a dataset for product type####
label <- vector(mode="character", length = length(tr_product@itemInfo$labels))
for (i in 1:length(tr_product@itemInfo$labels)) {
label[i] <- as.character(ptype[which(ptype[,1] == tr_product@itemInfo$labels[i]),3]) #2 for original ptypes, 3 for modified
}
tr_ptype <- aggregate(tr_product, label)
# Plot the volume of sales by product type, colored by product type ####
EPA2 <- aggregate(EPA$Volume, by=list(Category=EPA$ProductType), FUN = sum)
ggplot(EPA2, aes(x=reorder(Category, -x), y = x, fill = Category)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 90)) +
xlab('Product Type') +
ylab('Volume of sales') +
labs(fill = 'Product Type')
# Plot the profit of sales by product type, colored by product type ####
EPA$Profit <- EPA$Volume * EPA$Price * EPA$ProfitMargin
EPA2 <- aggregate(EPA$Profit, by=list(Category=EPA$ProductType), FUN = sum)
ggplot(EPA2, aes(x=reorder(Category, -x), y = x, fill = Category)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 90)) +
xlab('Product Type') +
ylab('Profit') +
labs(fill = 'Product Type')
itemFrequencyPlot(tr_product, topN=25, type='absolute',col=brewer.pal(8,'Pastel2'), ylab='Frequency', cex=1)
itemFrequencyPlot(tr_ptype, topN=nrow(itemInfo(tr_ptype)), type='absolute',col=brewer.pal(8,'Pastel2'), ylab='Frequency', cex=1)
#Creating datasets for distributor and consumer####
#Defining the matrix of distributors
transactions_dataframe <- as.data.frame(t(as.matrix((tr_product@data))))
colnames(transactions_dataframe)<- label
types <- unique(label)
types <- cbind(types, c(2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)) #For ptypes = 3 (Mouse & Keyboard 3 or 4 -- Accesories 2-3)
distr <- vector(mode="logical", nrow(transactions_dataframe))
for (i in 1:nrow(transactions_dataframe)){
for (j in 1:length(types[,1])){
total = length(which(transactions_dataframe[i,which(colnames(transactions_dataframe)==types[j,1])] == TRUE)) #Look for columns with same name and sum the trues.
if (total >= types[j,2]){ #Distributor condition defined in dataframe types
distr[i] = TRUE #If the trues are more than the distributor condition then TRUE in the matrix
}
}
total = length(which(transactions_dataframe[i,which(colnames(transactions_dataframe)==types[4,1])] == TRUE)) #Laptop (ptypes = 3 -> j = 4
total = total + length(which(transactions_dataframe[i,which(colnames(transactions_dataframe)==types[5,1])] == TRUE)) #Desktop (ptypes =3 -> j = 5)
total = total + length(which(transactions_dataframe[i,which(colnames(transactions_dataframe)==types[7,1])] == TRUE)) # Pc Gaming (ptypes = 3 -> j = 7)
if (total >= 2) {
distr[i] <- TRUE
}
}
sum(distr)
#Function to verify the distribution
distribution <- function (trans) {
distribution_index <- vector(mode="integer", length =length(trans))
for (i in 1:length(distribution_index)) {
distribution_index[i] <- size(trans[i])
}
ggplot()+ aes(distribution_index) +
geom_bar(color = "blue", fill = "white")
#geom_histogram(color="blue", binwidth = 1, fill="white",)
}
#Matrix creation and outlier elimination
#Product-Consumers
tr_product_cons <- tr_product[!distr]
tr_product_cons <- tr_product_cons[-which(size(tr_product_cons) > 8)] #Remove outliers
#Product-Distributor
tr_product_dist <- tr_product[distr]
tr_product_dist <- tr_product_dist[-which(size(tr_product_dist) > 25)]
#Type -> consumers
tr_ptype_cons <- tr_ptype[!distr]
tr_ptype_cons <- tr_ptype_cons[-which(size(tr_ptype_cons) > 8)]
#Type -> distributor
tr_ptype_dist <- tr_ptype[distr]
colnames(types) <- c("Types", "Restriction")
knitr::kable(
types
)
population <- data.frame ( type = c("retailer", "consumers"), transactions = c(sum(distr), length(tr_product)-sum(distr)), prp = c(sum(distr)/length(tr_product), (length(tr_product)-sum(distr))/length(tr_product)) )
ggplot( data = population, aes( x= "", y = transactions, fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(transactions),  " - ", round(prp*100), "%")), position = position_stack(vjust = 0.5))
#Distributions of the populations - consumer
distribution(tr_product_cons)
#Distributions of the population - retailer
distribution(tr_product_dist)
itemFrequencyPlot(tr_ptype_cons, topN = 16, ylab= "Product Type Frequency", col=brewer.pal(8,'Pastel2'),  cex=1) #Consumers - Product type
itemFrequencyPlot(tr_product_cons, topN = 10, ylab= "Product Frequency", col=brewer.pal(8,'Pastel2'),   cex=1 )  #Consumers - Product
itemFrequencyPlot(tr_ptype_dist, topN = 16, ylab= "Product Type Frequency", col=brewer.pal(8,'Pastel2'), cex=1 ) #Retailers - Pthpe
itemFrequencyPlot(tr_product_dist, topN = 10, ylab= "Product Frequency", col=brewer.pal(8,'Pastel2'), cex=1) #Retailers - Product
ggplot( data = population, aes( x= "", y = transactions, fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(transactions),  " - ", round(prp*100), "%")), position = position_stack(vjust = 0.5)) +
ggtitle('Proportion of Consumers and Retailers buying from Electronidex')
ggplot( data = population, aes( x= "", y = transactions, fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(transactions),  " - ", round(prp*100), "%")), position = position_stack(vjust = 0.5)) +
ggtitle('Proportion of Consumers and Retailers buying from Electronidex')
# Plot the proportion of Retailers buying multiple Gaming Pcs (which will be considered Gaming retailers) ####
retailers_buying_one_gaming_pc <- sum(transactions_df['Gaming Pc'] > 0) - sum(transactions_customers_categories_df['Gaming Pc'] > 0)
retailers_buying_multiple_gaming_pc <- sum(transactions_df['Gaming Pc'] > 1)
multiple_gaming_pcs <- data.frame (type = c("One Gaming PC", "Multiple Gaming PCs"), number = c(retailers_buying_one_gaming_pc,retailers_buying_multiple_gaming_pc), prop = c(retailers_buying_one_gaming_pc/(retailers_buying_one_gaming_pc+retailers_buying_multiple_gaming_pc), retailers_buying_multiple_gaming_pc/(retailers_buying_multiple_gaming_pc + retailers_buying_one_gaming_pc)) )
ggplot( data = multiple_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5)) +
ggtitle('Proportion of Retailers buying multiple Gaming PCs')
ggplot( data = multiple_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5))
ggplot( data = multiple_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5)) +
ggtitle('Proportion of Retailers buying multiple Gaming PCs')
# Plot the proportion of Retailers buying Gaming Pcs ####
retailers_buying_gaming_pc <- sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
retailers_not_buying_gaming_pc <- 4822 - sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
buying_gaming_pcs <- data.frame (type = c("Buying Gaming PCs", "Not Buying Gaming PCs"), number = c(retailers_buying_gaming_pc,retailers_not_buying_gaming_pc), prop = c(retailers_buying_gaming_pc/(retailers_buying_gaming_pc+retailers_not_buying_gaming_pc), retailers_not_buying_gaming_pc/(retailers_buying_gaming_pc + retailers_not_buying_gaming_pc)) )
# Plot the proportion of Retailers buying Gamingg Pcs ####
retailers_buying_gaming_pc <- sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
retailers_not_buying_gaming_pc <- 4822 - sum(transactions_distributors_categories_df['Gaming Pc'] > 0)
buying_gaming_pcs <- data.frame (type = c("Buying Gaming PCs", "Not Buying Gaming PCs"), number = c(retailers_buying_gaming_pc,retailers_not_buying_gaming_pc), prop = c(retailers_buying_gaming_pc/(retailers_buying_gaming_pc+retailers_not_buying_gaming_pc), retailers_not_buying_gaming_pc/(retailers_buying_gaming_pc + retailers_not_buying_gaming_pc)) )
ggplot( data = buying_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5)) +
ggtitle('Proportion of Retailers buying Gaming PCs')
ggplot( data = population, aes( x= "", y = transactions, fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(transactions),  " - ", round(prp*100), "%")), position = position_stack(vjust = 0.5)) +
ggtitle('Proportion of Consumers and Retailers buying from Electronidex')
ggplot(EPA2, aes(x=reorder(Category, -x), y = x, fill = Category)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 90)) +
xlab('Product Type') +
ylab('Volume of sales') +
labs(fill = 'Product Type') +
ggtitle('Volume of sales by product type')
ggplot(EPA2, aes(x=reorder(Category, -x), y = x, fill = Category)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 90)) +
ylab('Volume of sales') +
labs(fill = 'Product Type') +
ggtitle('Volume of sales by product type')
ggplot(EPA2, aes(x=reorder(Category, -x), y = x, fill = Category)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 90)) +
xlab('') +
ylab('Volume of sales') +
labs(fill = 'Product Type') +
ggtitle('Volume of sales by product type')
ggplot(EPA2, aes(x=reorder(Category, -x), y = x, fill = Category)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 90)) +
xlab('') +
ylab('Profit') +
labs(fill = 'Product Type') +
ggtitle('Profit by product type')
ggplot(EPA2, aes(x=reorder(Category, -x), y = x, fill = Category)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 90)) +
xlab('') +
ylab('Volume of sales') +
labs(fill = 'Product Type') +
ggtitle('Volume of sales by product type')
# Plot the volume of sales by product type, colored by product type ####
EPA2 <- aggregate(EPA$Volume, by=list(Category=EPA$ProductType), FUN = sum)
ggplot(EPA2, aes(x=reorder(Category, -x), y = x, fill = Category)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 90)) +
xlab('') +
ylab('Volume of sales') +
labs(fill = 'Product Type') +
ggtitle('Volume of sales by product type')
# Plot the proportion of Retailers buying multiple Gaming Pcs (which will be considered Gaming retailers) ####
retailers_buying_one_gaming_pc <- sum(transactions_df['Gaming Pc'] > 0) - sum(transactions_customers_categories_df['Gaming Pc'] > 0)
retailers_buying_multiple_gaming_pc <- sum(transactions_df['Gaming Pc'] > 1)
retailers_buying_one_gaming_pc
retailers_buying_multiple_gaming_pc
retailers_buying_multiple_gaming_pc <- retailers_buying_one_gaming_pc - sum(transactions_df['Gaming Pc'] > 1)
retailers_buying_multiple_gaming_pc
# Plot the proportion of Retailers buying multiple Gaming Pcs (which will be considered Gaming retailers) ####
retailers_buying_one_gaming_pc <- sum(transactions_df['Gaming Pc'] > 0) - sum(transactions_customers_categories_df['Gaming Pc'] > 0) - sum(transactions_df['Gaming Pc'] > 1)
retailers_buying_multiple_gaming_pc <- sum(transactions_df['Gaming Pc'] > 1)
multiple_gaming_pcs <- data.frame (type = c("One Gaming PC", "Multiple Gaming PCs"), number = c(retailers_buying_one_gaming_pc,retailers_buying_multiple_gaming_pc), prop = c(retailers_buying_one_gaming_pc/(retailers_buying_one_gaming_pc+retailers_buying_multiple_gaming_pc), retailers_buying_multiple_gaming_pc/(retailers_buying_multiple_gaming_pc + retailers_buying_one_gaming_pc)) )
ggplot( data = multiple_gaming_pcs, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5)) +
ggtitle('Proportion of Retailers buying multiple Gaming PCs')
sum(size(transactions_customers_items))
sum(size(transactions_distributors_items))
34984+8120
# Plot the percentage of
items_customers <- sum(size(transactions_customers_items))
items_distributors <- sum(size(transactions_distributors_items))
items_transaction_distribution <- data.frame (type = c("Customer number of items", "Distributors number of items"), number = c(items_customers,items_distributors), prop = c(items_customers/(items_customers+items_distributors), items_distributors/(items_customers + iitems_distributors)) )
items_transaction_distribution <- data.frame (type = c("Customer number of items", "Distributors number of items"), number = c(items_customers,items_distributors), prop = c(items_customers/(items_customers+items_distributors), items_distributors/(items_customers + items_distributors)) )
ggplot( data = items_transaction_distribution, aes( x= "", y = number,  fill = type))+
geom_bar(stat = "identity", color = "white")+
coord_polar("y", start=0)+
scale_fill_brewer(palette="Blues")+
theme_void()+
geom_text(aes(label = paste0(round(number),  " - ", round(prop*100), "%")), position = position_stack(vjust = 0.5)) +
ggtitle('Proportion of Retailers buying Gaming PCs')
itemFrequencyPlot(tr_product, topN=15, type='absolute',col=brewer.pal(8,'Pastel2'), ylab='Frequency', cex=1)
label
transactions_df['Gaming Pc']>0
setdiff(transactions_df['Gaming Pc']>0,transactions_df['Desktop']>0)
transactions_df['Desktop']>0
transactions_df['Gaming Pc']>0
transactions_df['Desktop']>0
transactions_df[transactions_df['Desktop']>0]
setdiff(transactions_df[transactions_df['Gaming Pc']>0],transactions_df[transactions_df['Desktop']>0])
sum(transactions_df[transactions_df['Desktop']>0])
sum([transactions_df['Desktop']>0])
sum([transactions_df['Desktop']>0)
sum(transactions_df['Desktop']>0)
transactions_df['Desktop']>0 == transactions_df['Gaming Pc'] > 0
transactions_df['Desktop']>0
transactions_df['Gaming Pc'] > 0
(transactions_df['Desktop']>0) == (transactions_df['Gaming Pc'] > 0)
(transactions_df['Desktop']>0) > (transactions_df['Gaming Pc'] > 0)
sum((transactions_df['Desktop']>0) > (transactions_df['Gaming Pc'] > 0))
sum((transactions_df['Desktop']>0) < (transactions_df['Gaming Pc'] > 0))
sum(((transactions_df['Desktop']>0) < (transactions_df['Gaming Pc'] > 0)) & (transactions_df['Laptops']>0) < (transactions_df['Gaming Pc'] > 0))
sum(((transactions_df['Desktop']>0) < (transactions_df['Gaming Pc'] > 1)) & (transactions_df['Laptops']>0) < (transactions_df['Gaming Pc'] > 1))
sum(((transactions_df['Desktop']>0) < (transactions_df['Gaming Pc'] > 0)) & (transactions_df['Laptops']>0) < (transactions_df['Gaming Pc'] > 0))
sum(((transactions_distributors_categories_df['Desktop']>0) < (transactions_distributors_categories_df['Gaming Pc'] > 0)) & (transactions_distributors_categories_df['Laptops']>0) < (transactions_distributors_categories_df['Gaming Pc'] > 0))
543/9835
sum(((transactions_customers_categories_df['Desktop']>0) < (transactions_customers_categories_df['Gaming Pc'] > 0)) & (transactions_customers_categories_df['Laptops']>0) < (transactions_customers_categories_df['Gaming Pc'] > 0))
433/5160
EPA
EPA['Volume']
sum(EPA$Volume)
max(EPA$Volume)
sum(EPA$Volume)
library(ggplot2)
